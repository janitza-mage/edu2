
Origin-Agent-Cluster header
    https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin-Agent-Cluster
    https://wicg.github.io/origin-agent-cluster/


-----------------------------------------------------------------------------------------------------------------------
Different approach: inner-system interpreter (JS interpreter on WASM)
-----------------------------------------------------------------------------------------------------------------------

We might manage to avoid async/promises altogether, and then block them.

At Figma: Running on the main thread
    The benefits of running on the main thread are that plugins can:
        Directly edit the document rather than a copy of it, eliminating loading time issues.
        Run our complex component updating and constraints logic without needing to have two copies of that code.
        Make synchronous API calls in situations where you’d expect a synchronous API. There would be no confusion with loading or flushing updates.
        Be written in a more intuitive way: plugins are just automating actions that the user would otherwise do manually using our UI.
    However, now we have these problems:
        Plugins can hang, and there is no way to interrupt a plugin.
        Plugins can make network requests as figma.com.
        Plugins can access and modify global state. This includes modifying our UI, creating dependencies on internal application state outside the API, or doing downright malicious things like changing the value of ({}).__proto__ which poisons every new and existing JavaScript object.
    Decided to drop the "cannot hang" requirement
    It’s Browser APIs that are dangerous. -> And APIs are all global variables. So hide the global variables!

Possible JS implementations:
    https://bellard.org/quickjs/
    Duktape (fewer Features, but used in practice by Figma)

Browser support: good, except IE (Edge works)

-----------------------------------------------------------------------------------------------------------------------
Different Approach: Realms
-----------------------------------------------------------------------------------------------------------------------

https://github.com/tc39/proposal-shadowrealm
- integration into Node is an open ticket

-----------------------------------------------------------------------------------------------------------------------
Alternative Approach: Any other embeddable language, running on WASM, possibly on the server
-----------------------------------------------------------------------------------------------------------------------

Lua
    https://github.com/ceifa/wasmoon
