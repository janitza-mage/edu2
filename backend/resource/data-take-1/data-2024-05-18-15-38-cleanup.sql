--
-- PostgreSQL database dump
--

-- Dumped from database version 14.11 (Ubuntu 14.11-0ubuntu0.22.04.1)
-- Dumped by pg_dump version 14.11 (Ubuntu 14.11-0ubuntu0.22.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: Author; Type: TABLE DATA; Schema: edu2; Owner: -
--

COPY edu2."Author" (id, name) FROM stdin;
1	Martin
\.


--
-- Data for Name: Course; Type: TABLE DATA; Schema: edu2; Owner: -
--

COPY edu2."Course" (id, "authorId", title, description, "scriptLibrary") FROM stdin;
1	1	Linear Algebra 1 (vectors as arrows)	This course is an introduction into linear algebra. It defines vectors as mathematical\nobjects that represent real-world things such as displacement, velocity and forces.\n\n[This intro video from Khan Academy should help those who have never heard of vectors\nbefore](https://www.youtube.com/watch?v=br7tS1t2SFE)\n	repetitionFailedToken = {};\n\nrepeat = (n, factory) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    for (let attempt = 0; attempt < 1000; attempt++) {\n      const element = factory();\n      if (element !== repetitionFailedToken) {\n        result.push(element);\n        break;\n      }\n      if (attempt === 999) {\n        throw new Error("repetition did not succeed");\n      }\n    }\n  }\n  return result;\n}\n\nrepeatAsync = async (n, factory) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    for (let attempt = 0; attempt < 1000; attempt++) {\n      const element = await factory();\n      if (element !== repetitionFailedToken) {\n        result.push(element);\n        break;\n      }\n      if (attempt === 999) {\n        throw new Error("repetition did not succeed");\n      }\n    }\n  }\n  return result;\n}\n\nrandomInt = (limit) => Math.floor(Math.random() * limit);\nrandomElement = (elements) => elements[randomInt(elements.length)];\n\nshuffleInPlace = (elements) => {\n  for (let i = elements.length; i > 0; i--) {\n    const sourceIndex = randomInt(i);\n    const previousLast = elements[i - 1];\n    elements[i - 1] = elements[sourceIndex];\n    elements[sourceIndex] = previousLast;\n  }\n}\n\ngetShuffled = (elements) => {\n  elements = [...elements];\n  shuffleInPlace(elements);\n  return elements;\n}\n\ncreatePassiveCanvas = ({ onRender, onPosition, onClick }) => {\n\n  const $canvas = $("<canvas width='500' height='500' style='max-width: 100%'></canvas>");\n  const canvas = $canvas[0];\n  const context = canvas.getContext("2d");\n\n  const $root = $("<div>");\n  const root = $root[0];\n  $root.append($canvas);\n\n  let dirty = true;\n  const state = {\n    $canvas,\n    canvas,\n    context,\n    $root,\n    root,\n    position: { x: 0, y: 0 },\n    redraw: () => { dirty = true; },\n    redrawImmediately: () => { onRender(state); dirty = false; },\n    toObjectUrl: () => new Promise((resolve, reject) => {\n      /*\n      canvas.toBlob((blob) => {\n        if (blob) {\n          console.log("*", URL.createObjectURL(blob));\n          resolve(URL.createObjectURL(blob));\n        } else {\n          reject("could not create Blob object from canvas");\n        }\n      });\n      */\n      resolve(canvas.toDataURL());\n    }),\n  }\n\n  const updatePosition = (event) => {\n    var offset = $canvas.offset();\n    var x = (event.pageX - offset.left) / $canvas.width() * 500;\n    var y = (event.pageY - offset.top) / $canvas.height() * 500;\n    state.position = { x, y };\n  };\n  \n  canvas.addEventListener("mousemove", (event) => {\n    updatePosition(event);\n    if (onPosition) {\n      dirty = dirty || onPosition(state);\n    }\n  });\n  \n  canvas.addEventListener("click", (event) => {\n    updatePosition(event);\n    if (onPosition) {\n      dirty = dirty || onPosition(state);\n    }\n    if (onClick) {\n      dirty = dirty || onClick(state);\n    }\n  });\n  \n  setInterval(() => {\n    if (dirty) {\n      dirty = false;\n      onRender(state);\n    }\n  }, 50);\n\n  return state;\n};\n\nsetupCoordinateGridCanvas = (context, minX, maxX, minY, maxY, options) => {\n\n    // parameter normalization and computing derived values\n    minX = Math.round(minX);\n    maxX = Math.round(maxX);\n    minY = Math.round(minY);\n    maxY = Math.round(maxY);\n    let startX = minX - 0.5;\n    const endX = maxX + 0.5;\n    let startY = minY - 0.5;\n    const endY = maxY + 0.5;\n\n    // colors, incl. grey-out support\n    const darkColor = options?.greyedOut ? "#ccc" : "black";\n    const lightColor = options?.greyedOut ? "#eee" : "lightgrey";\n\n    // transformation\n    context.scale(1 / (maxX - minX + 1) * context.canvas.width, -1 / (maxY - minY + 1) * context.canvas.height);\n    context.translate(-startX, -endY);\n\n    // optionally clip negative part\n    if (options?.clipNegative) {\n        minX = Math.max(0, minX);\n        minY = Math.max(0, minY);\n        startX = Math.max(0, startX);\n        startY = Math.max(0, startY);\n    }\n\n    // grid\n    if (options?.drawGrid ?? true) {\n        context.strokeStyle = lightColor;\n        context.lineWidth = 0.1;\n        context.beginPath();\n        for (let x = minX; x <= maxX; x++) {\n            context.moveTo(x, startY);\n            context.lineTo(x, endY);\n        }\n        for (let y = minY; y <= maxY; y++) {\n            context.moveTo(startX, y);\n            context.lineTo(endX, y);\n        }\n        context.stroke();\n    }\n\n    // main axes\n    context.strokeStyle = darkColor;\n    context.lineWidth = 0.1;\n    context.beginPath();\n    context.moveTo(startX, 0);\n    context.lineTo(endX, 0);\n    context.moveTo(0, startY);\n    context.lineTo(0, endY);\n    context.stroke();\n\n    // arrows\n    context.beginPath();\n    context.moveTo(endX - 0.05, 0);\n    context.lineTo(endX - 0.2, -0.2);\n    context.moveTo(endX - 0.05, 0);\n    context.lineTo(endX - 0.2, +0.2);\n    context.moveTo(0, endY - 0.05);\n    context.lineTo(-0.2, endY - 0.2);\n    context.moveTo(0, endY - 0.05);\n    context.lineTo(+0.2, endY - 0.2);\n    context.stroke();\n\n    // ticks\n    if (options?.drawTicks ?? true) {\n        context.strokeStyle = darkColor;\n        context.lineWidth = 0.1;\n        context.beginPath();\n        for (let x = minX; x <= maxX; x++) {\n            context.moveTo(x, -0.15);\n            context.lineTo(x, 0.15);\n        }\n        for (let y = minY; y <= maxY; y++) {\n            context.moveTo(-0.15, y);\n            context.lineTo(0.15, y);\n        }\n        context.stroke();\n    }\n    if (options?.drawTickNumbers ?? options?.drawTicks ?? true) {\n        context.font = "0.5px sans-serif";\n        context.fillStyle = darkColor;\n        context.lineWidth = 0.1;\n        for (let x = minX; x <= maxX; x++) {\n            if (x !== 0 || options?.clipNegative) {\n                context.save();\n                context.translate(x - 0.18, -0.65);\n                context.scale(1, -1);\n                context.fillText(x.toString(), 0, 0);\n                context.restore();\n            }\n        }\n        for (let y = minY; y <= maxY; y++) {\n            if (y !== 0 || options?.clipNegative) {\n                context.save();\n                context.translate(-0.65, y - 0.18);\n                context.scale(1, -1);\n                context.fillText(y.toString(), 0, 0);\n                context.restore();\n            }\n        }\n    }\n\n    // sane and stable defaults\n    context.strokeStyle = "black";\n    context.fillStyle = "black";\n    context.lineWidth = 0.1;\n    context.setLineDash([]);\n\n}\n\npoint = (context, x, y, label = undefined, options = {}) => {\n    context.beginPath();\n    context.arc(x, y, options.size ?? 0.15, 0, 2 * Math.PI);\n    context.fill();\n    if (label !== undefined) {\n        context.font = options.font ?? "0.6px sans-serif";\n        context.translate(x, y);\n        context.scale(1, -1);\n        context.fillText(label, 0.2, 0.6);\n    }\n};\n\narrow = (context, x1, y1, x2, y2, tipSize = 0.2) => {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const ndx = dx / length;\n    const ndy = dy / length;\n\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.lineTo(x2 - tipSize * ndx - tipSize * ndy, y2 - tipSize * ndy + tipSize * ndx);\n    context.moveTo(x2, y2);\n    context.lineTo(x2 - tipSize * ndx + tipSize * ndy, y2 - tipSize * ndy - tipSize * ndx);\n    context.stroke();\n};\n\n// The extensionFactor should normally be enough, but in case it is not, it can be increased by the caller. Don't pass\n// a super-large number by default -- this could cause rounding problems.\ninfiniteLine = (context, x1, y1, x2, y2, extensionFactor = 1000) => {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    context.beginPath();\n    context.moveTo(x1 - extensionFactor * dx, y1 - extensionFactor * dy);\n    context.lineTo(x2 + extensionFactor * dx, y2 + extensionFactor * dy);\n    context.stroke();\n};\n\nshowXAxisAngle = (context, x1, y1, x2, y2) => {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const intersectionX = x1 - y1 * dx / dy;\n\n    context.beginPath();\n    context.arc(intersectionX, 0, 0.2, 0, 2 * Math.PI);\n    context.fill();\n    context.beginPath();\n    context.arc(intersectionX, 0, 0.6, 0, 0.5 * Math.PI); // TODO\n    context.stroke();\n};\n\n
2	1	Linear Algebra 2 ($\\mathbb{R}^n$ vector space)	This course develops the $\\mathbb{R}^n$ vector space purely as a numerical object, dropping the\nnotion of arrows with a direction and length. It serves as a step towards abstract vector\nspaces.\n\nIf you have not completed Linear Algebra 1 yet, caution is advised: You may find the\ncontent of this course to be too abstract to understand.\n	\n// --------------------------------------------------------------------------------------------------------------------\n// generic\n// --------------------------------------------------------------------------------------------------------------------\n\nfunction repeat(n, factory) {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(factory());\n  }\n  return result;\n}\n\nfunction removeNullish(array) {\n  return array.filter((x) => x !== null && x !== undefined);\n}\n\nfunction randomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\n// --------------------------------------------------------------------------------------------------------------------\n// Katex formatting\n// --------------------------------------------------------------------------------------------------------------------\n\nfunction arrow(what) {\n  return "\\\\vec{" + what + "}";\n}\n\nfunction col(a, b, c, d) {\n  if (b === undefined) {\n    return `\\\\begin{pmatrix}${a}\\\\end{pmatrix}`;\n  }\n  if (c === undefined) {\n    return `\\\\begin{pmatrix}${a}\\\\\\\\${b}\\\\end{pmatrix}`;\n  }\n  if (d === undefined) {\n    return `\\\\begin{pmatrix}${a}\\\\\\\\${b}\\\\\\\\${c}\\\\end{pmatrix}`;\n  }\n  return `\\\\begin{pmatrix}${a}\\\\\\\\${b}\\\\\\\\${c}\\\\\\\\${d}\\\\end{pmatrix}`;\n}\n\n\n// --------------------------------------------------------------------------------------------------------------------\n// Vector math\n// --------------------------------------------------------------------------------------------------------------------\n\nfunction randomComponent(maxAbs) {\n  return randomInt(maxAbs * 2 + 1) - maxAbs;\n}\n\nfunction randomVector(dimension, maxAbs) {\n  if (dimension < 1 || dimension > 4) {\n    throw new Error("dimension must be between 1 and 4");\n  }\n  return col(\n      randomComponent(maxAbs),\n      dimension >= 2 ? randomComponent(maxAbs) : undefined,\n      dimension >= 3 ? randomComponent(maxAbs) : undefined,\n      dimension >= 4 ? randomComponent(maxAbs) : undefined,\n  );\n}\n\nfunction simpleR3Exercise(description, v1, v2, v3, moreWrongAnswers) {\n  return {\n    description,\n    type: "ChooseOne",\n    rightAnswer: "$" + col(v1, v2, v3) + "$",\n    wrongAnswers: [\n      "$" + col(v1 + 1, v2 - 1, v3 + 1) + "$",\n      "$" + col(v1 - 1, v2, v3) + "$",\n      "$" + col(v1, v2, v3 + 1) + "$",\n      ...(moreWrongAnswers ?? []),\n    ],\n  };\n}\n\n// --------------------------------------------------------------------------------------------------------------------\n// export\n// --------------------------------------------------------------------------------------------------------------------\n\n// noinspection JSAnnotator\nreturn {\n  repeat,\n  removeNullish,\n  randomInt,\n  arrow,\n  col,\n  randomComponent,\n  randomVector,\n  simpleR3Exercise,\n};\n
3	1	Linear Algebra 3 (abstract vector spaces)	This course continues the way towards abstraction taken in Linear Algebra 2 and drops even\nthe notion of a vector as a tuple of numbers, keeping only the rules for handling them.\nThis abstraction allows us to treat other things as vectors, such as functions.	
\.


--
-- Data for Name: Image; Type: TABLE DATA; Schema: edu2; Owner: -
--

COPY edu2."Image" (id, "courseId", "contentType", data) FROM stdin;
1	1	image/png	\\x89504e470d0a1a0a0000000d49484452000000c8000000c80806000000ad58ae9e00000006624b474400ff00ff00ffa0bda79300000b2549444154789ceddd7b90966519c7f1efee2287950445e4902daba299041109e6646aa58e66167f141eb2a03f2ccb66c206a3c64ee31f76d24c27b5742427a71c3b98e3795213b383a7c07153c7034a68ad4a080a2ca82cf447d7da3bdb72b3e073bdfb2e7e3f33efeceeb3cf3ed70bbbbfbdefe779efe75a682c43c78e1dbb01d8126f876614e9e8e858dcd1d1b1a5a3a36371c6f1adb1f3d468ce7a423ba01db87be5ca95c301e2edddb15d1a108d1290d9c0126056afedb362fbec017a5e7a931be8800c01be0b5c0bec0e307af4e85701c68c19f30ab025b6ff0ef869d6944bda9a810ec830e004a0097819983371e2c42e8071e3c66d8891e3c5d8f7306097817dba7ab319e880ac07e6008b817701bfeef5f9eb81f7c4e7e7c4fe52dd0c19e827003c0c7ca0f0f9e5dbf8bc9466a04710a9a16507640a702bd005ac06ae48ae27552a33206f05ee02ee8fa04c03ae4eac27552ef31c647e84e31b35db9e49ac2755ae29f1d877c409f6bec074e031e02bc01ffbd8773af02380d6d6d6f77575750d193972e496b6b6b69700162e5cb86cc68c19eb2a7c6ed38151c04bc083151ed71a3b598dcc803c0ab401c703f7006700df04de0e3cd76bdf23813bb776a0458b163173e6ccc4a72af52d738ab52a92dab338ec7c60017004704daf7dd7c4f94a9f23484b4bcb32c011c41a8d5e63bb5cdec7497967bce0b755071d74d06a604bbc4dd1c8ab47add1583532af625d1acb48de1f4b44be144b4bee4aac29552a738ab504f802f0336022b034ce479e4fac29552a7ba9c9cfe3210d4a2e35910a0c88546040a4020322151810a9c080480506442a3020528101910a0c88546040a4020322151810a9c080480506442ac80cc8e9d19dbdf6313fb19e54b9ec1ba66e078e4eae21a5718a251564f6c53a1df80eb036faf2de049cbb95f63d368eb34643d6c80cc874604fe0696032f043e021e0e43ef6b5719c1a52e639486d4a97458793dba2f5cf2bbdf6b5719c3576861a6fc8a1c026604469271bc759a3916a648e2073624af51cb01f7021700bb021b1a654a9ccab58b3a2c3fbf3f1576c1f00e625d6932a9739822c88873468f93a88546040a4020322151810a9c080480506442a3020528101910a0c88546040a4020322151810a9c080480506442a30205241bd02f2ab681c77709dea4995a847403e0aec55873a52e5b203b21b701e7046721d2945665f2c804b8067a327d6066066dc9bde9b8de3acd190353203f25ee0b238ef68de46406c1ca78694d5b461187005f039e05560f836f6b7719c3576861afd3619e8065e8cc7eab88af512b0b0f485368eb34623d5c81a419e8abebc3d86019dc06ce09ea49a52e5b202b239468d1e3d53acb57656d46092fd07747a6cacc31533a9722e35910a0c88546040a4020322151810a9c080480506442a3020528101910a0c88546040a4020322151810a9c080480506442ac80cc8894007b03e6ebbbd01d82fb19e54b9cc807400a7026dc0b468fff38bc47a52e532ef287ca4e6fd6660053027b19e54b9ecdb600f067e1f4d1b8601670117f4b19f8de3acd19035b20332249e543b3017b80ef8431ffbd9384e0d29bb69c3266055cde321606fe0e55efbd938ce1a3b438d37649f681eb77f69271bc759a3916a645ec53a039801ec014c8946d64f02cb126b4a95ca9c624d04ae0526c4f4ea6ee0d8682a270d0a9901393b1ed2a0e55213a9c080480506442a3020528101910a0c88546040a4020322151810a9c080480506442a3020528101910a0c88546040a482cc809c06dc178de33a81cbe39e6069d0c80cc8dec039710ffa71c02ce0c2c47a52e532ef28fc56cdfbff022e061624d6932a97dd17abd655400b704a1f9fb3719c351ab246bd02f2c908c0bba3476f6f368e5343ca6e1c47f4e3fd2170cc56c2818de3acb193d4d86e27032f447fac7eb1719c351aa946e60872127011f0616049621d294de665deb3813de3b5902df1589b584faa5ce6083235f1d8525db8d4442a3020528101910a0c88546040a4020322151810a9c080480506442a3020528101910a0c88546040a4020322151810a92033208702b703abe366a9e189b5a4149901d918ad7e3e9f58434a957947e1d2784c4fac21a5aa475face911941131aa6c6d1f1bc759a3e16a344a406c1ca786548fc671fd61e3386bec0c3576c8f4edb98a65e3386b34520d5f07910a320372708c1c4be3e30df1f1c8c49a52a532cf411ea8f39f57902ae7144b2a3020528101910a0c88546040a4020322151810a9c080480506442a3020528101910a0c88546040a4020322fdcfaec0d0da0d0644faaf0381bf02dfabdd987d4ffa99c002600fe00ee034a0b3f4051b376e6ca97d9b61c9922523bbbbbb69696949bb79cb1a83aec6a5c054e09dd11fe1baace7d2e3a8b841feb008c86f801bb7f545adadadaf015be26d8a7adcf76e8d4157a30df877dcf5ba1ad887e429d667a3b3e29f801781af02c7016f4bac29eda815c0bc08c868e01a6068e62db10f4533b84535dbd6001f8f9ebdb55e6f1cd7dcdc7cf8e6cd9b9b9a9a9a183162c42680f1e3c76f183e7c7877554f6cc58a15a3d6ad5bd754db5aa86ad6189c353a3b3b47ac5ebd7a18c0d8b163b7d6c7ad12cf029fe8b56d3970721ffb1e19c9f5e1a3a11e9927e9ab80dd7a6ddb1d78a18f7d5f6f1cd7d3e0abb9b9794bcfa851f508b27cf9f2915d5d5d435a5b5b37b5b7b757d990ce1a83bc463d47906b808b6a3ede17e8eec739c8e2486f5a13316b58632b3e026c8efdee0386669ea45f067c0a3824469273819b8167126b4a3baa0db8325a55ad014e045ecd2e3a3fce453600d703e3fbf135d3e39c24f3cf2658c31abddd1923c7666076e2f39006a503e3caeb0503fd44a446f57f6bb11aad35684b0c819b808e18eeaa36129806bc06dc9f707c80897131a2335e80ca30099810f3e5c793feaf7a4c03c694fe86cb0e9a0a8cebb5ed5e606dc57500c60293e3eaeae309c74fd7063c063c11af972c05f6aab8c6797125ede5589856b59678deeb8087e31b7d73fc66aad2ad716ef737e079e0ef407bc5357a4c8a2543193fb45703ff8c3ece3d8f032aaed10c9c1fe7c18fc42fadf32aae51175702bf8d51ad05b80db8b0e21afbc7bab0f9490169064e0176898fc7024f0167575ca7b5e6fd26e097bd562c54e97ae0278901f97ac2716b9d093c192f33f4d8bdbf5fdc28cbdd9be3b2dac57125a11bb8247ed8aaf444ac0bcbb2397e587b165aae8cebe97b575ca72bd60b1d007c089892f4bd3c35567c67ae6c1d1a539f1149c7ff22704e8c82538161b11871509910c1a87d11714a6ccb58029d3582f43631e6bcc7261cfb7460594c1dee4a58043a06783a56b51e9b3882ac8bd7c636c5e2d6d67e7c5d7f0d8f5fb637c448be24a6a41facb0465d4c8e30d49e73ec1bdb7a9fc455a11e01790bf017e0c7c97546c5a87574c5c7bd0af872bc9f1590b69a916f9f3807fd7e85c71f173f4337d6dcfbf4b538ef6994d953bfec1aff9077d46c3b245ec9ccf88764076437e0cfc01575fa46cc011eadf07847c4e87440fca29a07ac8ff7b3a642c4f7e5810a8fd712d3ddb935dbdae3676d527f0ed0287fe5767d5cf539bce61b7d44fc67655ebecc302aae323d1a7750d6e3f9b7d75c18a842cfa87d4bbc6d8de9ca6d715e786f85b56ab5c794b42add710e38a1665bcf743ef35c34c5bc58e97b52247e4dc24bfe93e24ec74be292df51c0ac0a8f3f34be210f02c7c4f18faa7809c5aec04d11bed9c0b7631ebfb0c21abd654cb186c695cb4fc7bfe307316338bee23a27c49d8273e3d84bb7e78a5fa38c20c47fd6a608c866e03309574f66c59d8ec43c7461bc68745f45c71f11574b00ceaad97e4f857f9bfb95b8bfffe898ca75c6ffd94d151dbf2fab125e24ec8e69dcc76284fa47dc9e5dd5f7a2c70df1cb776e4cb916c5fde7922449922449922449922449922449922449922449922449caf21fa373ddf53f627e150000000049454e44ae426082
2	1	image/png	\\x89504e470d0a1a0a0000000d49484452000000c8000000c80806000000ad58ae9e00000006624b474400ff00ff00ffa0bda79300000c1f49444154789ceddd7b705c6519c7f1ef266d6e445a5296a611b7010a22b5180b291791624b19b0a2fd430b45b0f50f1485198b53ac4ebd0d7fe08d8b305c14a69111a58317748000237428a2582ea6c84a192e851ad014629342d3a4a5b9f807cfe2ba266fd3f67d764fc2ef33b3b3c9c9c9794e2ebfbcef397bce1348968a743add070cd9738547916c36bb2e9bcd0e65b3d9751edb578df153a3cc6b87f64123f04867676715803d3f62cb454a2229015904b401730a96cfb1e58b4ab45ff22e57ea804c00be0fdc091c043079f2e4b700a64c99b20b18b2e5bf037eea35e5121949a90352099c0da4803781c50d0d0dbd0053a74eedb391a3cbd63d059858dadd95779b52076407b01858077c08f875c1c7ef028eb38f2fb6f5458a6642a977007806f858e0e39bf7f0711137a51e414412cd3b203381fb815ea01b58ed5c4f242acf80bc17781878c282722cb0c6b19e48749ec720cb2d1cdfca5bf68a633d91e8528edb5e6b07d887034dc073c0d7803f0eb36e13f063809a9a9a8ff4f6f64ea8adad1dca64326f00ac5cb972d3ecd9b37b22ee5b1330097803782ae27655639cd5f00cc8b340065808ac072e06be0dbc1fd852b0ee69c043236da8a5a585e6e666c75d15199ee7146bab25357771d855c00a602e7047c1badbec7865d811a4bcbc7c13a0114435925e63afdc32cc417987bde037a2638e39a61b18b2671749be7a54359255c3f32cd64d7619c947ed1291afd8a5250f3bd61489ca738ad5067c19f819d0006cb0e391d71c6b8a44e57da9c9cfed213226e95213910005442440011109504044021410910005442440011109504044021410910005442440011109504044021410910005442440011109f00cc845d69d3dffb1dcb19e4874de374c3d082c70ae21e246532c9100cfbe581701df03b65b5fde56e08a11daf7a8719c6a24b28667409a808381978119c0d5c0d3c09261d655e3384924cf6390fc946eb20e270f58eb9f5d05ebaa719c6a8c871afbe524a01fa80eada4c671aa91a41a9e23c8629b526d018e00ae05ee03fa1c6b8a44e579166b8e75787fcdfe8bed93c032c77a22d1798e202bec213266e975109100054424400111095040440214109100054424400111095040440214109100054424400111095040440214109100054424400111092856407e658de38e2f523d91288a11904f028714a18e4874de013910b812b8d8b98e880bcfbe58003702af5a4fac3ea0d9ee4d2fa4c671aa91c81a9e013911b8d98e3bcaf61010358e9344f26ada5009ac06be08bc0554ed617d358e538df15063d466000340973dbaed2cd61bc0cad027aa719c6a24a986d708f292f5e5cda9043a8045c07aa79a22d1790564d0468d9cdc146bbb3a2bca58e2fd0f74727616e18c994874bad4442440011109504044021410910005442440011109504044021410910005442440011109504044021410910005442440011109504044023c03720e900576d86db777034738d61bb5cecece89d96c96cecece89a5de174936cf1ba6b2c0f9d6f6a71a5805fcd2ba9d944a1d70fdfcf9f34f1e1a1a22954a9d0cdc0e5c622116f91f9e01d998f77619d00e2c76ac371abf00ce1a1a1a02c09e9758b78b8525de374920efdb608f07fe604d1b2a81cb806b8659cfbd715c7b7b7be5c2850b471cbd5a5b5bd76732995dfb53a3c0786965f3aeaee17d4ffa53c0914023b014f8db08eb4d06e602f4f6f602d0d3d393dab871e36480818181e3f67747babac233a8aeaeae133399ccfe9619cea4dcd7e648359c6a7807a41fd89af7781a381478b3603df7c67175757595a1e39fbababaf5804610d52899c3ac79dc91a1959c1bc7dd6bfb50f8688d5d28c9cdd05463f43c4ff35e0cccb6334733ad91f58bc026c79a7b723eb026957afbd0cb9ed7001794709f24c13ca7580dc09dc0349b5e3d029c694de54aa50b386feddab5d3b76cd972727d7dfda3f3e6cd3baf84fb2309e7199055f6489c743abd3b9d4e03ec2ef5be48b2e95213910005442440011109504044021410910005442440011109504044021410910005442440011109504044021410910005442440011109f00cc885c0e3d638ae03b8c5ee091619333c03722870b9dd837e163007b8d6b19e48749e77147e27efed7f0137002b1ceb8944e7dd382edf6d403930dc3de0ee8de386a9371edacca886738d6205e4b316800f5bafde42a7010f8df4c92d2d2d343737fbeea1c830bc1bc761fd78af06ce18211c14a3715c81c4fec5528d315d63af2d015eb7fe58a3e2dc380e12dea84c359255c373043917b80ef838d0e65847c48de769de55c0c1f65a48aec5e776c77a22d1798e20b31cb72d5214bad4442440011109504044021410910005442440011109504044021410910005442440011109504044021410910005442440011109504044023c037212f020d06d374b5539d61271e119909dd6eae74b8e35445c79de51b8c11e4d8e35445c15a32f569305a5da469591d651e338d5485c8da404448de324918ad1386e34d4384e35c6438d7dd2b43767b1d4384e35925443af8388047806e4781b3936d8fb7df67ead634d91a83c8f419e2cf2bf5710894e532c91000544244001110950404402141091000544244001110950404402141091000544244001110950404402141091000544e4bf0e002af2172820226f3b1af80bf083fc85def7a45f0aac00ea80b5c0854047e81376eedc599effeca1adadad76606080f2f272b79bb75463ccd5b80998057cd0fa23fcde6b5f724eb71be44fb180fc06b8674f9f545353b31b18b26717c5b8ef5d35c65c8d0cf06fbbebb51b380ce729d617acb3e29f802ee0ebc059c0fb1c6b8aecab766099056432700750e1794becd3d60cae256fd936e0d3d6b337df3b8de3cacaca4e1d1c1c4ca55229aaababfb01eaebebfbaaaaaa0662ed587b7bfba49e9e9e547e6ba1d854636cd6e8e8e8a8eeeeeeae0448a7d323f5718be255e03305cb36034b8659f7344bae1e7a24eae17990be1538b060d941c0ebc3acfb4ee3b85c83afb2b2b2a1dca8117b04d9bc79736d6f6fef849a9a9afec6c6c6980de954638cd728e6087207705ddefb870303a338065967e9756b22a61aaa31824f0083b6dee34085e741facdc005c00936925c01dc0bbce25853645f65805bad55d536e01ce02defa2cbed58a40fb80ba81fc5e734d93189e7bf4d500dd528f4908d1c83c022c7fd1019938eb633afd7947a474492eaffaec54a5a6bd0721b02fb81ac0d77b1d502c702bb81271cb60fd06027233aec05280fd38169365f7edee97b95732c3025f43f5cf6d12c606ac1b2c780ed91eb00a481197676f57987edbbcb00cf012fd8eb251b804322d7b8d2cea4bd6917a6c5566efbdd033c633fe87bed2f534cf7dbb1dd5f81d780bf038d916be44cb74b863c7e69d700ffb43eceb9c751916b940157d971f046fba37565e41a45712bf05b1bd5ca8107806b23d738d2ae0b5bee149032e03c60a2bd9f065e025645ae5393f7760ab8bde08a8598ee027ee218906f3a6c37dfa5c08bf63243ce41a3fde4a45cee5e66a7d56eb0330903c08df6cb16d30b765d989741fb65cd5d68d969e7d30f8d5ca7d7ae173a0a980fcc74fa599e6f577c7b5ed95a61539f6aa7ed5f025c6ea3e02ca0d22e461c53a65930f25f449c69cb3c2e81f61a410a35d89cf74c876d5f046cb2a9c3c30e17814e015eb6ab5acf741c417aecb5b17ebbb8b566149f375a55f6c7f66e1bc9db6c4a3a2f628da2986161c83fe638dc96151ec4c5508c80bc077814b8deb9ce241bb51644deee6dc057ed6daf8064f246bec3ec18f48711b73fd57e87eec9bbf7e91b76dc9394d9d3a81c605fc807f2969d60af647a7c21de013910f833b0ba483f88c5c0b311b737d746a7a3ec0fd5326087bded3515c27e2e4f46dc5eb94d7797e62d6bb4dfb5e9a3d94052fecbed0e3beb736ade0f7aae7db33c4f5f7a986467999eb53b288bb1ff8d79270662c88ddaf7d9738d4d571eb0e3c2c722d6cad76853d25806ec18705adeb2dc74def358d4c532bbd2f75c4bfc368797fca7db9d8e37da29bfd3813911b75f613f90a780336cfba747be84e200a0d5c2b708f8aecde35746ac51c8638a5561672e3f675fc78f6cc6b030729db3ed4ec1a5b6ed0d7b73c62f292308f6cdeab7800c029f77387b32c7ee74c4e6a12bed45a3c7236dbfdace96005c96b77c7dc4ffcdbdcbeeef5f6053b90efb9eb546dafe70b63abc483860d3b84fd908f50fbb3d3bd6cf22e76efbe3bbd4a65c2d76ffb9888888888888888888888888888888888888888888888888888888888888888878f90fd0171565a1fcada20000000049454e44ae426082
3	1	image/png	\\
4	1	image/png	\\
5	1	image/png	\\
\.


--
-- Data for Name: Unit; Type: TABLE DATA; Schema: edu2; Owner: -
--

COPY edu2."Unit" (id, "courseId", index, title, description, "contentUrl", "exerciseDefinition", "exerciseScript") FROM stdin;
1	1	0	Punkt	Um in die Lineare Algebra einzusteigen, müssen wir erst ein paar geometrische Grundbegriffe\ndefinieren. Der erste Begriff ist der Punkt:\n\n* Ein Punkt ist das, was eine Position, aber keine Größe bzw. räumliche Ausdehnung und auch\n  keine sonstigen Eigenschaften (Form, Farbe etc.) hat.\n\nEin Punkt hat also nur eine Position und sonst nichts. Wenn wir einen Punkt in einer Zeichnung darstellen\nwollen, ist das etwas unpraktisch, denn einen echten Punkt ohne Ausdehnung könnte man nicht gut sehen, und\njede Darstellung mit Ausdehnung macht es schwierig, zu erkennen, wo genau der Punkt sich befindet.\n\nAls Lösung wird ein Punkt üblicherweise als ein kleines Kreuzchen oder ein kleiner ausgefüllter Kreis dargestellt.\nBei einem Kreuzchen ist dann gemeint, dass sich der eigentliche Punkt an der Stelle befindet, an der sich die beiden\nLinien des Kreuzchens schneiden. Die Linien selbst und z.B. deren Länge haben dabei keine Bedeutung, sondern machen\nden Punkt nur in der Zeichnung besser sichtbar. Bei der Darstellung als kleiner, ausgefüllter Kreis befindet sich\nder eigentliche Punkt in der Mitte des Kreises und die Größe des Kreises hat wieder keine mathematische Bedeutung.\n	\N	{"type": "script"}	context.showExerciseSheet([\n  {\n    description: "Wähle unter diesen Objekten den Punkt aus:",\n    type: "Script",\n    script: (context) => {\n      const objects = getShuffled(["punkt", "kreis", "quadrat", "linie"]);\n      let selectedIndex = null;\n      const canvasState = createPassiveCanvas({\n        onRender: (state) => {\n\n          // clear canvas so the background with green/red indicator for the answer is visible\n          const g = state.context;\n          g.resetTransform();\n          g.fillStyle = "white";\n          g.clearRect(0, 0, state.canvas.width, state.canvas.height);\n\n          // objects\n          function drawObject(x, y, type) {\n            g.resetTransform();\n            g.translate(x, y);\n            g.lineWidth = 3;\n            g.fillStyle = g.strokeStyle = (selectedIndex === null) ? "#008" : "#aaa";\n            switch (type) {\n              case "punkt":\n                g.beginPath();\n                g.arc(125, 125, 5, 0, 2 * Math.PI);\n                g.fill();\n                break;\n              case "kreis":\n                g.beginPath();\n                g.arc(125, 125, 30, 0, 2 * Math.PI);\n                g.stroke();\n                break;\n              case "linie":\n                g.beginPath();\n                g.moveTo(30, 220);\n                g.lineTo(220, 30);\n                g.stroke();\n                break;\n              case "quadrat":\n                g.beginPath();\n                g.rect(30, 30, 160, 160);\n                g.fill();\n                break;\n            }\n            if (selectedIndex !== null) {\n              g.strokeStyle = "#888";\n              g.lineWidth = 20;\n              g.beginPath();\n              if (type === "punkt") {\n                g.moveTo(40, 125);\n                g.lineTo(90, 190);\n                g.lineTo(200, 40);\n              } else {\n                g.moveTo(20, 20);\n                g.lineTo(230, 230);\n                g.moveTo(20, 230);\n                g.lineTo(230, 20);\n              }\n              g.stroke();\n            }\n          }\n          drawObject(0, 0, objects[0]);\n          drawObject(250, 0, objects[1]);\n          drawObject(0, 250, objects[2]);\n          drawObject(250, 250, objects[3]);\n        },\n        onClick: (state) => {\n          selectedIndex = (state.position.x > 250 ? 1 : 0) + (state.position.y > 250 ? 2 : 0);\n          context.reportResult(objects[selectedIndex] === "punkt");\n          return true;\n        },\n      });\n      // $button.on("click", () => context.reportResult(true));\n      $(context.element).append(canvasState.root);\n    },\n  },\n]);\n
2	1	1	Koordinaten	Ein Punkt in einer Zeichnung ist gut sichtbar. Allerdings müsste man immer noch jeden Punkt von Interesse\neinzeichnen. Sobald man zwei oder mehr Punkte hat, wird es unübersichtlich: Welcher Punkt ist jetzt z.B. in\neinem Text gemeint? Man müsste mit dem Finger auf den Punkt zeigen, Pfeile malen, oder aber die Punkte benennen.\n\nDie bessere Lösung bieten _Koordinaten_. Damit können wir die Position eines Punkts durch Zahlen angeben. Dazu\nwerden zunächst _Koordinatenachsen_ festgelegt. Eine Achse zeigt nach rechts, die andere nach oben.\n\n![image](course:1)\n\nDer Kreuzungspunkt der beiden Achsen ist der _Ursprung_. Man kann die Position eines Punkts dann durch zwei\nZahlen angeben: Die erste Zahl gibt an, wie viele Einheiten man vom Ursprung aus nach rechts gehen muss, die andere\nZahl, wie viele Einheiten man nach oben gehen muss. Die Achsen legen dabei fest, was "nach rechts" und "nach oben"\ngenau bedeutet. Folgender Punkt hat zum Beispiel die Koordinaten "1 nach rechts, 3 nach oben":\n\n![image](course:2)\n\nDafür gibt es verschiedene Kurzschreibweisen, z.B. (1 | 3) und (1, 3) und (1; 3). Alle drei Schreibweisen sagen\ndas gleiche aus. Gerade die Schreibweise mit Komma hat allerdings die Gefahr der Verwechslung mit dem Dezimalkomma:\nIst der Punkt (1,5,5) jetzt "1,5 nach rechts, 5 nach oben" oder "1 nach rechts, 5,5 nach oben"? In der\nHandschrift lässt sich die Schreibweise mit Trennstrich ebenso leicht schreiben, deshalb benutzen wir sie hier:\n\n![image](course:3)\n	\N	{"type": "script"}	function myCreateCanvas(showLabels) {\n  let matrix = new DOMMatrix();\n  const canvasState = createPassiveCanvas({\n    onRender: (state) => {\n      const g = state.context;\n      g.resetTransform();\n      g.clearRect(0, 0, state.canvas.width, state.canvas.height);\n      setupCoordinateGridCanvas(g, -0.6, 6, -0.6, 6, { clipNegative: true, greyedOut: state?.greyedOut ?? state?.freeze });\n      matrix = g.getTransform();\n      g.fillStyle = g.strokeStyle = "blue";\n      point(g, canvasState.currentX, canvasState.currentY, canvasState.showLabels ? `(${canvasState.currentX}|${canvasState.currentY})` : undefined);\n      if (state.result !== undefined) {\n        g.resetTransform();\n        g.strokeStyle = "#888";\n        g.lineWidth = 20;\n        g.beginPath();\n        if (state.result) {\n          g.moveTo(80, 250);\n          g.lineTo(180, 380);\n          g.lineTo(400, 80);\n        } else {\n          g.moveTo(40, 40);\n          g.lineTo(460, 460);\n          g.moveTo(40, 460);\n          g.lineTo(460, 40);\n        }\n        g.stroke();\n      }\n    },\n    onClick: (state) => {\n      if (state.freeze) {\n        return false;\n      }\n      const screenSpacePoint = new DOMPoint(state.position.x, state.position.y, 0, 1);\n      const transformedPoint = matrix.inverse().transformPoint(screenSpacePoint);\n      transformedPoint.x = Math.round(transformedPoint.x);\n      transformedPoint.y = Math.round(transformedPoint.y);\n      if (transformedPoint.x >= 0 && transformedPoint.y >= 0) {\n        canvasState.currentX = transformedPoint.x;\n        canvasState.currentY = transformedPoint.y;\n      }\n      return true;\n    },\n  });\n  canvasState.showLabels = showLabels;\n  canvasState.currentX = -10;\n  canvasState.currentY = -10;\n  return canvasState;\n}\n\n(async () => {\n  context.showExerciseSheet([\n    {\n      description: "Setze den Punkt an verschiedene Stellen und beobache, welche Koordinaten er jeweils hat.",\n      type: "Script",\n      script: (context) => {\n        const canvasState = myCreateCanvas(true);\n        const $button = $("<button>weiter</button>");\n        $button.on("click", () => {\n          canvasState.freeze = true;\n          canvasState.redraw();\n          context.reportResult(true);\n        });\n        $(context.element).append(canvasState.root).append($button);\n      },\n    },\n    ...repeat(2, () => {\n      const targetX = randomInt(3) + 1;\n      const targetY = randomInt(3) + 1;\n      return {\n        description: `Setze den Punkt an die Position (${targetX}|${targetY}).`,\n        type: "Script",\n        script: (context) => {\n          const canvasState = myCreateCanvas(false);\n          const $button = $("<button>fertig</button>");\n          $button.on("click", () => {\n            canvasState.showLabels = true;\n            canvasState.freeze = true;\n            canvasState.redraw();\n            canvasState.result = canvasState.currentX === targetX && canvasState.currentY === targetY;\n            context.reportResult(canvasState.result);\n          });\n          $(context.element).append(canvasState.root).append($button);\n        },\n      };\n    }),\n    ...await repeatAsync(2, async () => {\n      const canvasState = myCreateCanvas(false);\n      canvasState.currentX = randomInt(3) + 1;\n      canvasState.currentY = randomInt(3) + 1;\n      canvasState.freeze = true;\n      canvasState.greyedOut = false;\n      canvasState.redrawImmediately();\n      return {\n        description: `Welche Koordinaten hat der Punkt?\\n\\n![image](${await canvasState.toObjectUrl()})`,\n        type: "FillInTheBlanks",\n        stencil: "( ((:x)) | ((:y)) )",\n        variables: [\n          {\n            "name": "x",\n            "type": "text",\n            "expected": "" + canvasState.currentX,\n          },\n          {\n            "name": "y",\n            "type": "text",\n            "expected": "" + canvasState.currentY,\n          },\n        ],\n      };\n    }),\n  ]);\n})();\n
3	1	2	Negative Koordinaten	Man kann bei weitem nicht alle Punkte erreichen, indem man vom Ursprung aus nach rechts und oben geht. Viele\nPunkte liegen links oder unten vom Ursprung. Dazu könnte man zwei weitere Zahlen anngeben, die angeben, wie viele\nEinheiten man nach links und unten gehen muss. Das wäre aber umständlich: Wenn man für einen Punkt nach links\ngehen muss, muss man nicht nach rechts gehen, und wenn man nach unten gehen muss, muss man nicht nach oben gehen --\nimmerhin muss man für die Angabe von Koordinaten ja keinen Hinternissen ausweichen. Es wären also immer mindestens\nzwei der Koordinaten gleich null.\n\nStattdessen werden negative Zahlen benutzt. Eine Angabe von "-1 nach rechts" ist das gleiche wie "1 nach links",\nund "-3 nach oben" ist das gleiche wie "3 nach unten". Dadurch werden die unnötigen vielen Zahlen vermieden.\nWir werden später außerdem sehen, dass man durch die negativen Zahlen alle Punkte in Berechnungen einheitlich\nbehandeln kann, egal auf welcher Seite der Koordinatenachsen sie liegen.	\N	{"type": "script"}	function myCreateCanvas(showLabels) {\n  let matrix = new DOMMatrix();\n  const canvasState = createPassiveCanvas({\n    onRender: (state) => {\n      const g = state.context;\n      g.resetTransform();\n      g.clearRect(0, 0, state.canvas.width, state.canvas.height);\n      setupCoordinateGridCanvas(g, -4, 4, -4, 4, { greyedOut: state?.greyedOut ?? state?.freeze });\n      matrix = g.getTransform();\n      g.fillStyle = g.strokeStyle = "blue";\n      point(g, canvasState.currentX, canvasState.currentY, canvasState.showLabels ? `(${canvasState.currentX}|${canvasState.currentY})` : undefined);\n      if (state.result !== undefined) {\n        g.resetTransform();\n        g.strokeStyle = "#888";\n        g.lineWidth = 20;\n        g.beginPath();\n        if (state.result) {\n          g.moveTo(80, 250);\n          g.lineTo(180, 380);\n          g.lineTo(400, 80);\n        } else {\n          g.moveTo(40, 40);\n          g.lineTo(460, 460);\n          g.moveTo(40, 460);\n          g.lineTo(460, 40);\n        }\n        g.stroke();\n      }\n    },\n    onClick: (state) => {\n      if (state.freeze) {\n        return false;\n      }\n      const screenSpacePoint = new DOMPoint(state.position.x, state.position.y, 0, 1);\n      const transformedPoint = matrix.inverse().transformPoint(screenSpacePoint);\n      canvasState.currentX = Math.round(transformedPoint.x);\n      canvasState.currentY = Math.round(transformedPoint.y);\n      return true;\n    },\n  });\n  canvasState.showLabels = showLabels;\n  canvasState.currentX = -100;\n  canvasState.currentY = -100;\n  return canvasState;\n}\n\n(async () => {\n  context.showExerciseSheet([\n    {\n      description: "Setze den Punkt an verschiedene Stellen und beobache, welche Koordinaten er jeweils hat.",\n      type: "Script",\n      script: (context) => {\n        const canvasState = myCreateCanvas(true);\n        const $button = $("<button>weiter</button>");\n        $button.on("click", () => {\n          canvasState.freeze = true;\n          canvasState.redraw();\n          context.reportResult(true);\n        });\n        $(context.element).append(canvasState.root).append($button);\n      },\n    },\n    ...repeat(2, () => {\n      const targetX = randomInt(7) - 3;\n      const targetY = randomInt(7) - 3;\n      if (targetX >= 0 && targetY >= 0) {\n        return repetitionFailedToken;\n      }\n      return {\n        description: `Setze den Punkt an die Position (${targetX}|${targetY}).`,\n        type: "Script",\n        script: (context) => {\n          const canvasState = myCreateCanvas(false);\n          const $button = $("<button>fertig</button>");\n          $button.on("click", () => {\n            canvasState.showLabels = true;\n            canvasState.freeze = true;\n            canvasState.redraw();\n            canvasState.result = canvasState.currentX === targetX && canvasState.currentY === targetY;\n            context.reportResult(canvasState.result);\n          });\n          $(context.element).append(canvasState.root).append($button);\n        },\n      };\n    }),\n    ...await repeatAsync(2, async () => {\n      const targetX = randomInt(7) - 3;\n      const targetY = randomInt(7) - 3;\n      if (targetX >= 0 && targetY >= 0) {\n        return repetitionFailedToken;\n      }\n      const canvasState = myCreateCanvas(false);\n      canvasState.currentX = targetX;\n      canvasState.currentY = targetY;\n      canvasState.freeze = true;\n      canvasState.greyedOut = false;\n      canvasState.redrawImmediately();\n      return {\n        description: `Welche Koordinaten hat der Punkt?\\n\\n![image](${await canvasState.toObjectUrl()})`,\n        type: "FillInTheBlanks",\n        stencil: "( ((:x)) | ((:y)) )",\n        variables: [\n          {\n            "name": "x",\n            "type": "text",\n            "expected": "" + canvasState.currentX,\n          },\n          {\n            "name": "y",\n            "type": "text",\n            "expected": "" + canvasState.currentY,\n          },\n        ],\n      };\n    }),\n  ]);\n})();\n
4	1	3	Abstand zwischen zwei Punkten TODO	Bei zwei Punkten ist es oft interessant, wie weit sie voneinander entfernt sind. Dabei sprechen wir beim _Abstand_\nvon der Länge der _kürzesten_ Verbindung zwischen den beiden Punkten, also ohne Umweg -- bei einer Karte wäre das\ndie "Luftlinie". Für jede andere Verbindung müsste man den genauen Weg kennen, um von dessen Länge zu sprechen,\naber der Abstand ergibt sich alleine aus den beiden Punkten.\n\nIn manchen Fällen kann man den Abstand direkt an den Koordinatenachsen ablesen:\n\n![image](course:4)\n\n![image](course:5)\n\nIm allgemeinen Fall muss man den Abstand entweder messen oder aus den Koordinaten der Punkte berechnen. Letzteres\ngeht gerade deshalb, weil der Abstand ja nur von den beiden Punkten bzw. dessen Koordinaten abhängt und\nsonst von nichts. Die genaue Formel zum Berechnen wird später erläutert.\n\n# TODO\n\n    Übungen (Idealvorstellung)\n    - ein Punkt fest (nicht der Ursprung), der zweite kann gesetzt werden, dann wird der Abstand angezeigt\n    Übung:\n    - Abstand zwischen zwei Punkten ablesen, deren Verbindung parallel zu den Koordinatenachsen ist\n	\N	{"type": "explicit", "exercises": []}	
5	1	4	Eigenschaften der Kürzesten Verbindung TODO	Der kürzeste Weg zwischen zwei Punkten hat viele Eigenschaften:\n- die Position des ersten Punkts ("Startpunkt")\n- die Position des zweiten Punkts ("Endpunkt")\n- die Länge der Verbindung\n- die Richtung der Verbindung (mit verschiedenem Verständnis davon, was "Richtung" bedeutet)\n- wieviele Einheiten man vom ersten Punkt nach rechts, links, oben und unten gehen muss, um zum zweiten Punkt zu kommen\n- ob man eine bestimmte Linie kreuzt\n- ob man sich vom Ursprung wegbewegt oder darauf zu\n- ...\n\nDie Vektorrechnung -- die Grundlage der linearen Algebra -- baut auf der Idee auf, dass man sich auf ein paar\nwenige dieser Eigenschaften konzentriert und die anderen ignoriert:\n    - wieviel Einheiten nach rechts/links (Zahl mit Vorzeichen)\n    - wieviel Einheiten nach oben/unten (Zahl mit Vorzeichen)\n    - Länge der Verbindung (nicht-negative Zahl)\n    - Richtung der Verbindung in dem Sinne: Wenn man die Verbindung in beide Richtungen verlängert -- welchen Winkel\n        bildet sie dann mit den Koordinatenachsen?\n\nDie Gesamtheit dieser Eigenschaften wird als _Vektor_ bezeichnet. Das heißt: Wenn zwei Vektoren sich in diesen\nEigenschaften gleichen, dann werden sie als "gleich" angesehen, auch wenn sie z.B. unterschiedliche Start- und\nEndpunkte haben. Ein Vektor fasst also viele kürzeste Wege als gleichartig zusammen, die sich nur in den\n"unwichtigen" Eigenschaften unterscheiden.\n"""\nÜbung:\n- Koordinatensystem mit mehreren farbig markierten Vektoren -- welche zwei sind gleich?)\n    - welche mit gleicher Länge aber unterschiedlicher richtung und gleichem Endpunkt\n    - welche mit gleicher Länge aber unterschiedlicher richtung und gleichem Startpunkt\n    - welche mit gleicher Richtung aber unterschiedlicher Länge und gleichem Startpunkt (längerer als durchgezogene\n        Linie, kürzerer als gestrichelte Linie)\n    - welche mit gleicher Richtung aber unterschiedlicher Länge und gleichem Endpunkt (längerer als durchgezogene\n        Linie, kürzerer als gestrichelte Linie)\n    - ein paar ganz andere Extra\n    - einer von den o.g. ein zweites Mal, ist dann einer der "einzelnen"\n    - Buttons mit Farbigen ausgefüllten Kreisen bzw. getrichelten Outline-Kreisen\n...\n...\n...\n	\N	{"type": "explicit", "exercises": []}	
6	1	5	(Titel unklar) TODO	Relevante Eigenschaften der kürzesten Verbindung:\n- wieviel Einheiten nach rechts/links (Zahl mit Vorzeichen)\n- wieviel Einheiten nach oben/unten (Zahl mit Vorzeichen)\n- Länge der Verbindung (nicht-negative Zahl)\n- Richtung der Verbindung in dem Sinne: Wenn man die Verbindung in beide Richtungen verlängert -- welchen Winkel\n    bildet sie dann mit den Koordinatenachsen?\n\nWenn wir möglichst kurz und knapp die Eigenschaften angeben wollen, dann sind nicht alle diese Angaben nötig,\ndenn sie enthalten dieselben Informationen doppelt:\n* Ein Vektor mit einer vorgegebenen Länge und Richtung hat immer die gleiche Anzahl an Einheiten nach recht/links\n  und oben/unten.\n* Ein Vektor mit einer vorgegebenen Anzahl an Einheiten nach rechts/links und oben/unten hat immer die gleiche\n  Länge und Richtung.\n"""\nZur letzten Regel gibt es eine einzige Ausnahme: bei der Länge 0 ist die Richtung undefiniert. Deshalb legen wir\nfest, dass zwei Vektoren der Länge 0 immer gleich sind, unabhängig von der angegebenen Richtung.\nÜbung: Wir haben jetzt festgelegt, welche Eigenschaften von Vektoren für uns relevant sind. Welche Auswahl an\n    Eigenschaften reicht als Angabe aus, so dass man die restlichen Eigenschaften daraus ermitteln kann?\n    - schritte nach rechts/links und oben/unten - ja\n    - Länge und Richtung - ja\n    - Länge und Schritte Rechts/Links - nein: Wenn der Vektor nur nach oben/unten geht, kennt man zwar seine\n        Länge, weiß aber nicht, ob nach oben oder nach unten\n    - Länge und Schritte Oben/Unten - nein: Wenn der Vektor nur nach rechts geht, kennt man zwar seine Länge, weiß\n        aber nicht, ob nach rchts oder nach links\n    - Richtung und Schritte Rechts/Links - nein: Wenn der Vektor nur nach oben oder unten geht, kennt man\n        seine Länge nicht\n    - Richtung und Schritte Oben/Unten - nein: Wenn der Vektor nur nach rechts oder links geht, kennt man\n        seine Länge nicht\n    -> epilog: Deshalb gibt es zwei gültige Darstellungen für Vektoren in unserem Sinne:\n        1. Länge und Richtung\n        2. Schritte nach rechts/links und nach oben/unten\n	\N	{"type": "explicit", "exercises": []}	
7	1	6	Vektoren verketten TODO	- zwei Vektoren hintereinander geben einen Weg, der i.A. nicht mehr der kürzeste Weg zum Zielpunkt ist.\n-   (bild)\n- Wir wollen erst mal aber nur mit kürzesten Wegen arbeiten. Das lösen wir so, dass wir zwar zwei Vektoren verketten\n    können, dann aber die Kette durch den kürzesten Weg zum Ende der Kette ersetzen. Dieses Verketten-und-Ersetzen\n    nennen wir die _Summe_ der beiden Vektoren.\n-   (bild)\nÜbungen\n- welche Aussage ist richtig:\n    - wenn man zwei Vektoren addiert, bleibt die Gesamtlänge gleich.\n        Anders formuliert: Die Länge der Summe zweier Vektoren ist gleich der Summe der Längen der beiden Vektoren.\n    - wenn man zwei Vektoren addiert, kann die Gesamtlänge gleich bleiben oder kleiner werden\n        Anders formuliert: Die Länge der Summe zweier Vektoren ist kleiner oder gleich der Summe der Längen der beiden Vektoren.\n    - wenn man zwei Vektoren addiert, kann die Gesamtlänge gleich bleiben oder größer werden\n        Anders formuliert: Die Länge der Summe zweier Vektoren ist größer oder gleich der Summe der Längen der beiden Vektoren.\n    - wenn man zwei Vektoren addiert, kann die Gesamtlänge gleich bleiben, kleiner werden oder größer werden\n        Anders formuliert: Die Länge der Summe zweier Vektoren ist gleich, kleiner oder größer der Summe der Längen der beiden Vektoren.\n- wann bleibt die Gesamtlänge gleich? Also wann ist die Summe der Längen der beiden Vektoren gleich der Länge der Summe?\n    - wenn die beiden Vektoren in die gleiche Richtung zeigen\n    - wenn die beiden Vektoren in die entgegengesetzte Richtung zeigen\n    - wenn die beiden Vektoren senkrecht aufeinander stehen\n	\N	{"type": "explicit", "exercises": []}	
8	1	7	Vektoraddition in Zahlen TODO	... (wie begründen?) TODO\nÜbung\n- rechenübungen\n	\N	{"type": "explicit", "exercises": []}	
9	1	8	Koordinatenvektor TODO	Koordinaten eines Punkts: Vektor vom Ursprung zum Punkt; man kann Koordinaten als Vektor angeben	\N	{"type": "explicit", "exercises": []}	
10	1	9	Nullvektor TODO	Nullvektor: Koordinaten des Ursprungs; neutrales Element der Addition; Länge 0; einziger Vektor ohne definierte Richtung, in Zahlen: 0, 0, 0	\N	{"type": "explicit", "exercises": []}	
11	1	10	Subtraktion TODO	- Subtraktion, verschiedene Interpretationen: Spitze anlegen und Rückwärts gehen; Vektor von Punkt A zu Punkt B;\n    Vektor finden, so dass die Summe einen bestimmten Vektor ergibt\n	\N	{"type": "explicit", "exercises": []}	
12	1	11	Vektor Umkehren TODO	auch: Vektor negieren, inverser Vektor\na+(-b) = a-b\na+(-a) = 0\nNullvektor ist sein eigener inverser Vektor\n	\N	{"type": "explicit", "exercises": []}	
13	1	12	Vektoren vervielfachen TODO	... TODO definition über Addition, dann als Zahl*Vektor schreiben\n... Auswirkung auf die Zahlen: verdoppeln und verdreifachen\n	\N	{"type": "explicit", "exercises": []}	
14	1	13	Skalare Multiplikation TODO	- Verallgemeinerung: Skalare Multiplikation (Vektor mit Zahl multiplizieren)\n    ... TODO erst in Zahlen, dann in Auswirkungen\n    ... evtl in mehreren units\n    - ganze Zahl == Vektor wiederholen\n    - Vektor um den Faktor verlängern\n    - Vektor um den Faktor verkürzen\n    - Vektor umkehren\n    - Kombination daraus\n    - Multiplikation mit 0 ergibt immer den Nullvektor\n	\N	{"type": "explicit", "exercises": []}	
15	1	14	Skalare Division TODO	- Vektor durch Zahl Teilen\n    gleiche Bedeutung wie Multiplikation mit Kehrwert\n    Übung: Rechenaufgaben\n	\N	{"type": "explicit", "exercises": []}	
16	1	15	Linearkombination TODO	- Linearkombinationen, ohne das Wort zu benutzen\n- Associativgesetz und Kommutativgesetz\n- Distributivgesetze\n	\N	{"type": "explicit", "exercises": []}	
17	1	16	Vektoren im Raum TODO	3 Komponenten	\N	{"type": "explicit", "exercises": []}	
18	1	17	(Wiederholung von früheren Dingen, vor allem Übungen, mit 3d-Vektoren)		\N	{"type": "explicit", "exercises": []}	
19	2	0	Vectors from $\\mathbb{R}^n$	In this course, we want to focus on the rules for doing calculations with vectors, and\nignore the notion of a vector as an arrow with a direction and length. To do so, we must\nfirst pin down how we want to think of a vector during this course.\n\nFrom Linear Algebra 1, we know that a vector can be represented as a tuple of numbers:\nTwo numbers for two-dimensional vectors, three numbers for three-dimensional vectors, and\nso on. These numbers may be negative such as -2, they may be fractions such as $\\frac{1}{3}$,\nand may be irrational such as $\\sqrt{2}$ or $\\pi$.\n\nA vector with two numbers is said to belong to $\\mathbb{R}^2$. We call $\\mathbb{R}^2$ the\n_vector space_ to which that vector belongs.\n\nIf it has three numbers, it belongs to $\\mathbb{R}^3$, and so on. In general, if a vector\nhas $n$ numbers, it belongs to $\\mathbb{R}^n$. \n\nWe write a vector as a column vector. For example, this is a vector from $\\mathbb{R}^3$:\n$\\begin{pmatrix}4\\\\-0.5\\\\1\\end{pmatrix}$\n	\N	{"type": "script"}	context.showExerciseSheet([\n  ...courseLibrary.repeat(2,\n    () => ({\n      description: "Which of these is a vector from $\\\\mathbb{R}^3$?",\n      type: "ChooseOne",\n      rightAnswer: "$" + courseLibrary.randomVector(3, 5) + "$",\n      wrongAnswers: [\n        "$" + courseLibrary.randomVector(1, 5) + "$",\n        "$" + courseLibrary.randomVector(2, 5) + "$",\n        "$" + courseLibrary.randomVector(4, 5) + "$",\n      ],\n    })\n  ),\n  ...courseLibrary.repeat(2,\n    () => {\n      const dimension = courseLibrary.randomInt(3) + 2;\n      return {\n        description: `To which vector space does $${courseLibrary.randomVector(dimension, 5)}$ belong?`,\n        type: "ChooseOne",\n        rightAnswer: `$\\\\mathbb{R}^${dimension}$`,\n        wrongAnswers: courseLibrary.removeNullish([\n          dimension === 2 ? null : "$\\\\mathbb{R}^2$",\n          dimension === 3 ? null : "$\\\\mathbb{R}^3$",\n          dimension === 4 ? null : "$\\\\mathbb{R}^4$",\n        ]),\n      };\n    }\n  ),\n]);\n
20	2	1	Notation for Vector Variables	We use a letter with an arrow on top to denote a variable for an unknown or arbitrary vector, like $\\vec{a}$.\nLetters without an arrow denote numbers. This way we can easily distinguish between them.	\N	{"type": "script"}	context.showExerciseSheet(courseLibrary.repeat(2, () => {\n  const r = courseLibrary.randomInt(3);\n  const right = "$" + courseLibrary.arrow(r === 0 ? "a" : r === 1 ? "b" : "c") + "$";\n  const wrong1 = "$" + (r === 0 ? "b" : r === 1 ? "c" : "a") + "$";\n  const wrong2 = "$" + (r === 0 ? "c" : r === 1 ? "a" : "b") + "$";\n  return {\n    description: "Which of these variables is used for a vector?",\n    type: "ChooseOne",\n    rightAnswer: right,\n    wrongAnswers: [wrong1, wrong2],\n  };\n}));\n
21	2	2	Vector Addition	We can add two vectors by adding their components:\n\n$\\begin{pmatrix}a_1\\\\a_2\\\\a_3\\end{pmatrix} + \\begin{pmatrix}b_1\\\\b_2\\\\b_3\\end{pmatrix} = \\begin{pmatrix}a_1 + b_1\\\\a_2 + b_2\\\\a_3 + b_3\\end{pmatrix}$\n\nFor example,\n\n$\\begin{pmatrix}1\\\\2\\\\0\\end{pmatrix} + \\begin{pmatrix}3\\\\-5\\\\1\\end{pmatrix} = \\begin{pmatrix}4\\\\-3\\\\1\\end{pmatrix}$\n\nIn Linear Algebra 1, we showed that this has the same result as placing the start of the second \narrow at the end of the first arrow. We now drop the idea of arrows and go with the above\nformula alone. 	\N	{"type": "script"}	context.showExerciseSheet(courseLibrary.repeat(3, () => {\n  const a1 = courseLibrary.randomComponent(5);\n  const a2 = courseLibrary.randomComponent(5);\n  const a3 = courseLibrary.randomComponent(5);\n  const b1 = courseLibrary.randomComponent(5);\n  const b2 = courseLibrary.randomComponent(5);\n  const b3 = courseLibrary.randomComponent(5);\n  return courseLibrary.simpleR3Exercise(\n    `What is $${courseLibrary.col(a1, a2, a3)} + ${courseLibrary.col(b1, b2, b3)}$?`,\n    a1 + b1, a2 + b2, a3 + b3,\n    ["$" + courseLibrary.col(a1 + a2 + a3, b1 + b2 + b3) + "$"],\n  );\n}));\n
22	2	3	Vector Subtraction	We can subtract vectors in a similar way. With arrows, subtraction was useful in\nseveral ways: It could place the _end_ of the second arrow at the end of the first\narrow, like addition but backwards. It could also find what arrow one would have\nto add to a given starting arrow to reach a given result arrow, or find the arrow\nfrom one point to another.\n\nAll these different cases did the same thing to the numbers, though:\n\n$\\begin{pmatrix}a_1\\\\a_2\\\\a_3\\end{pmatrix} - \\begin{pmatrix}b_1\\\\b_2\\\\b_3\\end{pmatrix} = \\begin{pmatrix}a_1 - b_1\\\\a_2 - b_2\\\\a_3 - b_3\\end{pmatrix}$\n\nSo again, we will redefine subtraction by focusing only on the formula.	\N	{"type": "script"}	context.showExerciseSheet(courseLibrary.repeat(3, () => {\n  const a1 = courseLibrary.randomComponent(5);\n  const a2 = courseLibrary.randomComponent(5);\n  const a3 = courseLibrary.randomComponent(5);\n  const b1 = courseLibrary.randomComponent(5);\n  const b2 = courseLibrary.randomComponent(5);\n  const b3 = courseLibrary.randomComponent(5);\n  return courseLibrary.simpleR3Exercise(\n    `What is $${courseLibrary.col(a1, a2, a3)} - ${courseLibrary.col(b1, b2, b3)}$?`,\n    a1 - b1, a2 - b2, a3 - b3,\n    ["$" + courseLibrary.col(a1 - a2 - a3, b1 - b2 - b3) + "$"],\n  );\n}));\n
23	2	4	Zero Vector	One thing that was of little importance with arrows was the _zero vector_ -- a vector\nthat, when added to any other vector, does not change it:\n\n> $\\vec{v} + \\vec{0} = \\vec{v}$\n\n> $\\vec{0} + \\vec{v} = \\vec{v}$\n\nUnlike for arrows, the zero vector will be very important here.	\N	{"type": "explicit", "exercises": [{"type": "ChooseOne", "description": "We have not yet said what the zero vector looks like in numbers. But we know that it must leave the other vector alone when added. From that, there is only one possible way the zero vector can look like. What is the zero vector for the $\\\\mathbb{R}^3$ vector space?\\n\\nHint: remember the formula for addition.", "rightAnswer": "$\\\\begin{pmatrix}0\\\\\\\\0\\\\\\\\0\\\\end{pmatrix}$", "wrongAnswers": ["$\\\\begin{pmatrix}0\\\\\\\\0\\\\end{pmatrix}$", "$\\\\begin{pmatrix}1\\\\\\\\0\\\\\\\\0\\\\end{pmatrix}$"]}]}	
24	2	5	Subtracting the Zero Vector	The zero vector has a similar effect in subtraction, but it's a bit more complex.\nRemember the formula for subtraction and work it out yourself!	\N	{"type": "explicit", "exercises": [{"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$\\\\vec{v} - \\\\vec{0} = \\\\vec{v}$", "rightAnswer": true}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$\\\\vec{0} - \\\\vec{v} = \\\\vec{v}$", "rightAnswer": false}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$\\\\vec{v} - \\\\vec{v} = \\\\vec{0}$", "rightAnswer": true}]}	
25	2	6	Inverse Vector	The last exercise has shown that when we subtract a vector from itself, we get the zero vector.\nCan we also find a vector to _add_ to get the zero vector? Yes, and it is called the _inverse_ vector.\nThe inverse to $\\vec{a}$ is written as $-\\vec{a}$ and is obtained by negating all the numbers in $\\vec{a}$:\n\n> $-\\begin{pmatrix}a_1\\\\a_2\\\\a_3\\end{pmatrix} = \\begin{pmatrix}-a_1\\\\-a_2\\\\-a_3\\end{pmatrix}$\n\nbecause then,\n\n> $\\begin{pmatrix}a_1\\\\a_2\\\\a_3\\end{pmatrix} + (-\\begin{pmatrix}a_1\\\\a_2\\\\a_3\\end{pmatrix}) = \\begin{pmatrix}a_1 + (-a_1)\\\\a_2 + (-a_2)\\\\a_3 + (-a_3)\\end{pmatrix} = \\begin{pmatrix}0\\\\0\\\\0\\end{pmatrix} = \\vec{0}$\n	\N	{"type": "explicit", "exercises": [{"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$(-\\\\vec{v}) + \\\\vec{v} = \\\\vec{0}$", "rightAnswer": true}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$(-\\\\vec{v}) = \\\\vec{v}$", "rightAnswer": false}, {"type": "ChooseYesNo", "description": "Is the following correct?\\n\\n$-\\\\vec{0} = \\\\vec{0}$", "rightAnswer": true}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{a}$ and $\\\\vec{b}$?\\n\\n$\\\\vec{a} + (-\\\\vec{b}) = \\\\vec{a} - \\\\vec{b}$", "rightAnswer": true}]}	
26	2	7	Multiplying a Vector by a Scalar	With numbers, we started with multiplication as a shorthand for repeated addition:\n\n> $3\\cdot x = x + x + x$\n\nand the same can be done with vectors:\n\n> $3\\cdot \\vec{v} = \\vec{v} + \\vec{v} + \\vec{v}$\n\nBut we generalized this for numbers and we can now write something like\n$\\sqrt{2}\\cdot\\sqrt{3}$ for which there is no equivalent in repeated addition.\nTo do the same with vectors, we'll have to define _multiplication of a number\nand a vector_ in such a way that it can be done for any number, and\n\n> $3\\cdot \\vec{v} = \\vec{v} + \\vec{v} + \\vec{v}$\n\nis still true. No problem at all:\n\n> $x\\cdot\\begin{pmatrix}a_1\\\\a_2\\\\a_3\\end{pmatrix} = \\begin{pmatrix}x\\cdot a_1\\\\x\\cdot a_2\\\\x\\cdot a_3\\end{pmatrix}$\n\nFor reasons that we will explain later, numbers are also called _scalars_ in the context\nof vectors and vector spaces. For now, just think "number" when you read "scalar".\n	\N	{"type": "script"}	context.showExerciseSheet(courseLibrary.repeat(3, () => {\n  const s = courseLibrary.randomComponent(2);\n  const a1 = courseLibrary.randomComponent(5);\n  const a2 = courseLibrary.randomComponent(5);\n  const a3 = courseLibrary.randomComponent(5);\n  return courseLibrary.simpleR3Exercise(\n    `What is $${s}\\\\cdot${courseLibrary.col(a1, a2, a3)}$?`,\n    s*a1, s*a2, s*a3,\n  );\n}));\n
27	2	8	Multiplication Rules	Let's find out more about the rules of multiplication. Again, remember the formula and\nthink about its consequences.	\N	{"type": "explicit", "exercises": [{"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$0\\\\cdot\\\\vec{v} = \\\\vec{0}$", "rightAnswer": true}, {"type": "ChooseYesNo", "description": "Is the following correct for all scalars $s$?\\n\\n$s\\\\cdot\\\\vec{0} = \\\\vec{0}$", "rightAnswer": true}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$1\\\\cdot\\\\vec{v} = \\\\vec{v}$", "rightAnswer": true}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{v}$?\\n\\n$-1\\\\cdot\\\\vec{v} = -\\\\vec{v}$", "rightAnswer": true}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{a}$, $\\\\vec{b}$ and scalars $x$, $y$?\\n\\n$(x + y)\\\\cdot(\\\\vec{a} + \\\\vec{b}) = x\\\\cdot\\\\vec{a} + y\\\\cdot\\\\vec{b}$", "rightAnswer": false}, {"type": "ChooseYesNo", "description": "Is the following correct for all vectors $\\\\vec{a}$, $\\\\vec{b}$ and scalars $x$, $y$?\\n\\n$(x + y)\\\\cdot(\\\\vec{a} + \\\\vec{b}) = x\\\\cdot\\\\vec{a} + x\\\\cdot\\\\vec{b} + y\\\\cdot\\\\vec{a} + y\\\\cdot\\\\vec{b}$", "rightAnswer": true}]}	
28	2	9	Dividing a Vector by a Scalar	Can we divide a vector by a scalar? What would be the meaning of that?\n\nIf we divide a number by 3, we expect to get a number that, when added three\ntimes, adds up to the original number. In general, if we divide $a$ by $s$, we\nexpect to get a result $b$ that when multiplied by $s$ again, returns to $a$:\n\n> $b = \\frac{a}{s}$\n\n> $s\\cdot b = a$\n\nIf $a$ is a vector, and is divided by a scalar $s$, then $b$ must be a vector too,\notherwise multiplying with $a$ cannot ever return to $a$:\n\n> $\\vec{b} = \\frac{\\vec{a}}{s}$\n\n> $s\\cdot\\vec{b} = \\vec{a}$\n\nThe formula for division is, unsurprisingly,\n\n> $\\frac{\\vec{a}}{s} = \\begin{pmatrix}a_1/s\\\\a_2/s\\\\a_3/s\\end{pmatrix} = \\frac{1}{s}\\cdot\\vec{a}$\n\n	\N	{"type": "explicit", "exercises": []}	
29	2	10	Dividing a Vector by a Vector	Can we divide a vector by a vector?\n\nBy logically extending what we did in the previous unit,\n\n> $\\vec{v} = \\frac{\\vec{a}}{\\vec{b}}$\n\nsuch that\n\n> $\\vec{v}\\cdot\\vec{b} = \\vec{a}$\n\nThe first obvious problem with this is that we have not defined any kind of\nmultiplication for two vectors yet. The second problem is that we don't really\nknow what the meaning of such a kind of division operation would be.\n\nIn fact, the reason why we have not defined the multiplication of two vectors\nyet is just that: We have to give it a _meaning_.\n\nNow it is rather obvious that we _could_ define multiplication and division\nfor two vectors just like we did for addition and subtraction, as\n_component-wise_ multiplication and division. But with addition and subtraction,\nwe did that because it reflects the way we can append arrows. This is\nnot the case for multiplication or division: There is no arrow equivalent for it.\n\nThis last paragraph is important enough to be elaborated: We cannot multiply\nor divide two vectors because we _choose_ not to, and we do that because it is\nnot useful. In a way, we are building a "toolbox" to operate on vectors, and\ninstead of a hammer and screwdrivers, it contains addition, subtraction, inverse,\nthe zero vector and scalar multiplication. Now the component-wise multiplication\nof two vectors is simply something that we _could_ put into that toolbox, but has\nno actual use, like putting a salt shaker into a real-world toolbox. So we don't\ndo that, by choice.\n\nWe will later learn about a different way of multiplying two vectors that is\nactually useful. But for now, we'll turn to different things.	\N	{"type": "explicit", "exercises": []}	
30	2	11	Parallel Vectors	With arrows, we could tell whether they are _parallel_, that is, point into the same direction.\nWe can do the same with purely numeric vectors, even though "direction" isn't really a concept\nwe are dealing with. The key is that we can make a vector longer or shorter (without changing\nits direction) by multiplying it with a scalar, so parallel vectors are those where we can make\none vector equal to the other by multiplying it with a scalar.\n	\N	{"type": "script"}	context.showExerciseSheet(courseLibrary.repeat(2, () => {\n  const s = courseLibrary.randomInt(2) + 2;\n  const a1 = courseLibrary.randomComponent(5);\n  const a2 = courseLibrary.randomComponent(5);\n  const a3 = courseLibrary.randomComponent(5);\n  return courseLibrary.simpleR3Exercise(\n    `Which vector is parallel to $${courseLibrary.col(a1, a2, a3)}$?`,\n    s*a1, s*a2, s*a3,\n  );\n}));\n
31	2	12	Vectors in Opposite Direction	With arrows, we had some freedom in whether we would call two vectors \\"parallel\\" if they point into opposite directions.	\N	{"type": "explicit", "exercises": [{"type": "ChooseOne", "epilogue": "Flipping the direction of an arrow is the same as inverting the vector, which is again the same as multiplying by -1:\\n\\n> $-\\\\vec{v} = (-1)\\\\cdot\\\\vec{v}$\\n\\nSo the decision whether we want to consider two vectors parallel if they point into opposite directions is the same decision whether we want to allow negative scalars to make one vector equal to the other. ", "description": "Here are two vectors whose arrows point into opposite directions:\\n\\n> $\\\\begin{pmatrix}1\\\\\\\\2\\\\\\\\0\\\\end{pmatrix}$ and $\\\\begin{pmatrix}-2\\\\\\\\-4\\\\\\\\0\\\\end{pmatrix}$\\n\\nWhat scalar must the first vector be multiplied with to get the second vector?", "rightAnswer": "-2", "wrongAnswers": ["2", "1", "-1"]}]}	
\.


--
-- Name: Author_id_seq; Type: SEQUENCE SET; Schema: edu2; Owner: -
--

SELECT pg_catalog.setval('edu2."Author_id_seq"', 1, true);


--
-- Name: Course_id_seq; Type: SEQUENCE SET; Schema: edu2; Owner: -
--

SELECT pg_catalog.setval('edu2."Course_id_seq"', 3, true);


--
-- Name: Image_id_seq; Type: SEQUENCE SET; Schema: edu2; Owner: -
--

SELECT pg_catalog.setval('edu2."Image_id_seq"', 5, true);


--
-- Name: Unit_id_seq; Type: SEQUENCE SET; Schema: edu2; Owner: -
--

SELECT pg_catalog.setval('edu2."Unit_id_seq"', 31, true);


--
-- PostgreSQL database dump complete
--

